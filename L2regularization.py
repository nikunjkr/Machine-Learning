{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyP7P068f2nZFrLH5mtEw76p",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nikunjkr/Machine-Learning/blob/master/L2regularization.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dqmV0QHP-2qu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "9231614c-0e17-4234-ff0d-c06320b12022"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#Loading the data\n",
        "df = pd.read_csv(\"ex2data2.txt\", header=None) \n",
        "print(df.head())\n",
        "print(df.describe())\n",
        "\n",
        "\n",
        "# VisuaLization of the data\n",
        "X = df.iloc[:, :-1].values\n",
        "y = df.iloc[:, -1].values\n",
        "pos, neg = (y == 1).reshape(118,1) , (y == 0).reshape(118,1)\n",
        "plt.scatter(X[pos[:, 0], 0], X[pos[:, 0], 1], c=\"r\", marker=\"+\")\n",
        "plt.scatter(X[neg[:, 0], 0], X[neg[:, 0], 1], marker=\"o\", s=10)\n",
        "plt.xlabel(\"Test 1\") \n",
        "plt.ylabel(\"Test 2\") \n",
        "kk = plt.legend([\"Accepted\", \"Rejected\"], loc=0)\n",
        "plt.show()\n",
        "\n",
        "# PoLynomiaL feature \n",
        "def mapFeature(x1,x2,degree):\n",
        "\n",
        "    #take in numpy array of xl and x2, return aLL poLynomiaL terms up to the given degree\n",
        "    \n",
        "  out = np.ones(len(x1)).reshape(len(x1),1)\n",
        "\n",
        "  for i in range(1,degree+1):\n",
        "    for j in range(i+1):\n",
        "      terms= (x1**(i-j) * x2**j).reshape(len(x1),1) \n",
        "      out= np.hstack((out,terms))\n",
        "  return out\n",
        "X = mapFeature(X[:,0], X[:,1],6)\n",
        "\n",
        "# Computing ReguLorised Cost Function \n",
        "def sigmoid(z):\n",
        "\n",
        "    #return the sigmoid of z\n",
        "    return 1 / (1 + np.exp(-z))\n",
        "\n",
        "def costFunctionReg(theta, X, y, Lambda):\n",
        "\n",
        "  \"\"\"\n",
        "   Take in numpy array of theta, X, and y to return the reguLarize cost function and gradient \n",
        "    of a Logistic regression\n",
        "  \"\"\"\n",
        "\n",
        "  m = len(y)\n",
        "  y = y[:, np.newaxis]\n",
        "  predictions = sigmoid(X @ theta)\n",
        "  error = (-y * np.log(predictions)) - ((1 - y) * np.log(1 - predictions))\n",
        "  cost = 1 / m * sum(error)\n",
        "  regCost = cost + Lambda / (2 * m) * sum(theta ** 2)\n",
        "\n",
        "  # compute gradient\n",
        "  j_0 = 1 / m * (X.transpose() @ (predictions - y))[0]\n",
        "  j_1 = 1 / m * (X.transpose() @ (predictions - y))[1:]+(Lambda / m) * theta[1:]\n",
        "  grad = np.vstack((j_0[:, np.newaxis], j_1))\n",
        "  return regCost[0], grad\n",
        "\n",
        "# InitiaLize fitting parameters\n",
        "initial_theta = np.zeros((X.shape[1], 1))\n",
        "# Set reguLarization parameter Lambda to 1\n",
        "Lambda = 1\n",
        "#Compute and dispLay initial. cost and gradient for reguLarized Logistic regression\n",
        "cost, grad=costFunctionReg(initial_theta, X, y, Lambda) \n",
        "print(\"Cost at initial theta (zeros):\",cost)\n",
        "\n",
        "# Gradient Descent\n",
        "def gradientDescent(X, y, theta, alpha, num_iters, Lambda):\n",
        "\n",
        "  \"\"\"\n",
        "    Take in numpy array X, y and theta and update theta by taking num_iters gradient steps \n",
        "    with Learning rate of oLpho\n",
        "\n",
        "    return theta and the List of the cost of theta during each iteration\n",
        "  \n",
        "  \"\"\"\n",
        "\n",
        "  m = len(y) \n",
        "  J_history = []\n",
        "\n",
        "  for i in range(num_iters):\n",
        "    cost, grad = costFunctionReg(theta, X, y, Lambda) \n",
        "    theta = theta - (alpha * grad)\n",
        "    J_history.append(cost)\n",
        "\n",
        "  return theta, J_history\n",
        "\n",
        "theta, J_history = gradientDescent(X, y, initial_theta, 1, 800, 0.2) \n",
        "print(\"The regularized theta using ridge regression:\\n\", theta)\n",
        "\n",
        "#PLotting cost function\n",
        "plt.plot(J_history)\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"$J(\\Theta)$\")\n",
        "plt.title(\"Cost function using Gradient Descent\") \n",
        "plt.show()\n",
        "\n",
        "# Plotting Decision Boundary\n",
        "def mapFeaturePlot(x1,x2,degree):\n",
        "\n",
        "  \"\"\"\n",
        "  take numpy array of xl and xl, return all polynomial terms up to the given degree\n",
        "  \"\"\"\n",
        "\n",
        "  out = np.ones(1)\n",
        "  \n",
        "  for i in range(1,degree+1):\n",
        "    for j in range(i+1):\n",
        "       terms= (x1**(i-j) * x2**j) \n",
        "       out= np.hstack((out,terms)) \n",
        "  return out\n",
        "\n",
        "plt.scatter(X[pos[:,0],1],X[pos[:,0],2],c=\"r\",marker=\"+\",label=\"Admitted\") \n",
        "plt.scatter(X[neg[:,0],1],X[neg[:,0],2],c=\"b\",marker=\"x\",label=\"Not admitted\")\n",
        "\n",
        "def mapFeaturePlot(x1,x2,degree):\n",
        "\n",
        "  \"\"\"\n",
        "  take in numpy array of xl and x2, return aLL polynomial terms up to the given degree\n",
        "  \"\"\"\n",
        "\n",
        "  out = np.ones(1)\n",
        "  \n",
        "  for i in range(1,degree+1):\n",
        "    for j in range(i+1):\n",
        "       terms= (x1**(i-j) * x2**j) \n",
        "       out= np.hstack((out,terms)) \n",
        "  return out\n",
        "\n",
        "plt.scatter(X[pos[:,0],1],X[pos[:,0],2],c=\"r\",marker=\"+\",label=\"Admitted\") \n",
        "plt.scatter(X[neg[:,0],1],X[neg[:,0],2],c=\"b\",marker=\"x\",label=\"Not admitted\")\n",
        "\n",
        "# Plotting decision boundary\n",
        "u_vals = np.linspace(-1,1.5,50)\n",
        "v_vals = np.linspace(-1,1.5,50)\n",
        "z = np.zeros((len(u_vals),len(v_vals)))\n",
        "for i in range(len(u_vals)):\n",
        "  for j in range(len(v_vals)):\n",
        "    z[i,j] = mapFeaturePlot(u_vals[i],v_vals[j],6) @ theta\n",
        "\n",
        "plt.contour(u_vals,v_vals,z.T,0) \n",
        "plt.xlabel(\"Exam 1 score\") \n",
        "plt.ylabel(\"Exam 2 score\") \n",
        "#plt.legend(loc=0)\n",
        "plt.show()\n",
        "\n",
        "# accuracy of Model\n",
        "def classifierPrediction(theta, X):\n",
        "  \n",
        "  \"\"\"\n",
        "  take in numpy array of theta and X and predict the class\n",
        "  \"\"\"\n",
        "\n",
        "  prediction = X.dot(theta)\n",
        "\n",
        "  return predictions > 0\n",
        "\n",
        "p = classifierPrediction(theta, X)\n",
        "print(\"Train Accuracy:\", (sum(p==y[:,np.newaxis])/len(y) * 100)[0],\"%\")"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "          0        1  2\n",
            "0  0.051267  0.69956  1\n",
            "1 -0.092742  0.68494  1\n",
            "2 -0.213710  0.69225  1\n",
            "3 -0.375000  0.50219  1\n",
            "4 -0.513250  0.46564  1\n",
            "                0           1           2\n",
            "count  118.000000  118.000000  118.000000\n",
            "mean     0.054779    0.183102    0.491525\n",
            "std      0.496654    0.519743    0.502060\n",
            "min     -0.830070   -0.769740    0.000000\n",
            "25%     -0.372120   -0.254385    0.000000\n",
            "50%     -0.006336    0.213455    0.000000\n",
            "75%      0.478970    0.646562    1.000000\n",
            "max      1.070900    1.108900    1.000000\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nx/z58wFoaWnh9NNPZ9y4cUycOJFNmzYBcMMNN/ChD32IsWPHct111wGwefNmjjnmGD7zmc9w7LHH\nMmvWLHbu3MnChQt58cUXmTp1KlOnTgXg3nvvZdKkSUycOJHZs2fzxhtvAPAf//EfHHPMMUycOJFf\n/epXSR6WVKV5tZn2lW5S759mkq5Ge1vHhZOOKlRX3e4ogfRG+1Xfgw8GjxpdBS5fvpzp06fz/ve/\nn8GDB7N27Vruvvtuli9fzmOPPca6dev42te+BsBnPvMZLr/8ctatW8eaNWsYNmwY9957Lxs3buR3\nv/sdzc3NrF27loceegiAZ555hssuu4ynnnqKgw8+mJ/85CdceeWVHH744TzwwAM88MAD/PnPf+Zb\n3/oW9913H7///e9paGjgBz/4AW+99RZf+MIX+M1vfsPatWt56aWX+vxZ8yLNq81u3zum72BF71/j\n6qi0E2U1ph13GAtmnqDkEVIjegY0Njby5S9/GYA5c+bQ2NiIu/O5z32OAw44AIBBgwbx+uuv09bW\nxic/+UkguIEPgtLDvffey4QJE4CgRLNx40ZGjBjBkUceycknnwzA+eefz8KFC/nKV76yz/s/+uij\nbNiwoWO7v/3tb0yaNImnn36aUaNGMXr06I79Fy9eHPPRyIY0e9ak3asnqffXjIX5pwTSGzF0C9yx\nYwerVq3iiSeewMzYu3cvZsbs2bMr/h3uztVXX80ll1yyz/LNmzd36WJbqsutuzNt2rQu7S/Nzc29\n+CT1J82eNWXfO6HusUl89rQTpfSdqrBStmzZMi644AK2bNnC5s2beeGFFxg1ahTvec97uPnmmzsa\nunfs2MFBBx3E8OHDufPOOwHYtWsXO3fu5Mwzz2TJkiUd7RZtbW28/HIwOsyf/vQnHnnkEQD+7d/+\njY9+9KMAHHTQQbz++usAfOQjH+Hhhx+mpaUFgL/+9a88++yzHHPMMWzevLmjnSWpBv6oPDWySu+p\nSijflECqUcO64MbGxo4qqXbnnHMOW7duZcaMGTQ0NDB+/Hi+973vAfDzn/+chQsXMnbsWE466SRe\neuklzjjjDD796U8zadIkxowZw6xZszqSwwc+8AEWLVrEsccey6uvvsqll14KwLx585g+fTpTp05l\n6NCh3HLLLZx33nmMHTu2o/pqwIABLF68mE984hNMnDiR9773vTX5zJXKWyNrorLQPVYKL5UJpdJS\n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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Cost at initial theta (zeros): 0.6931471805599461\n",
            "The regularized theta using ridge regression:\n",
            " [[ 2.25319932]\n",
            " [ 1.44552306]\n",
            " [ 2.33283911]\n",
            " [-3.57008233]\n",
            " [-2.35002884]\n",
            " [-3.07090829]\n",
            " [ 0.50119267]\n",
            " [-0.88407626]\n",
            " [-0.69606495]\n",
            " [-0.22204243]\n",
            " [-2.69560917]\n",
            " [ 0.04161168]\n",
            " [-1.31573798]\n",
            " [-0.80286232]\n",
            " [-2.23101395]\n",
            " [-0.39638083]\n",
            " [-0.43758167]\n",
            " [ 0.09476652]\n",
            " [-0.69300577]\n",
            " [-0.78996079]\n",
            " [-0.45416815]\n",
            " [-2.01051679]\n",
            " [ 0.16446857]\n",
            " [-0.59855483]\n",
            " [ 0.11471778]\n",
            " [-0.73960173]\n",
            " [-0.52044034]\n",
            " [-1.38532427]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEKCAYAAAA4t9PUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3deZxbZb348c83s+972+lMp9N9WqCt\ndGcphbIj+6Kg4MK1oiAXvaj443dBvdfleu9PFJQLiMimBRTUAhWUlqGotLSFtnSne2e6T2ft7DPP\n748kbTqdJZNzTnKSfN+vV14zSU7OeXKSnO+zP2KMQSmllAqVJ9IJUEopFd00kCillLJEA4lSSilL\nNJAopZSyRAOJUkopSzSQKKWUsiSigUREnhKRQyKyvo/n54lIvYis8d0eCHcalVJK9S8xwsd/GvgF\n8Gw/27xrjPlkeJKjlFJqsCJaIjHGLAOORjINSimlrIl0iSQYc0RkLbAPuNcYs6HnBiKyAFgAkJGR\nMa2ioiLMSVRKqei2evXqI8aYolBe6/ZA8gEw0hjTJCKXA38CxvXcyBjzBPAEwPTp082qVavCm0ql\nlIpyIrI71Ne6uteWMabBGNPk+38xkCQihRFOllJKqQCuDiQiMkxExPf/TLzprYlsqpRSSgWKaNWW\niCwE5gGFIlIFPAgkARhjHgNuAL4iIp1AC/Bpo9MVK6WUq0Q0kBhjbh7g+V/g7R6slFLKpVxdtaWU\nUsr9NJAopZSyRAOJUkopSzSQKKWUskQDiVJKKUs0kCillLJEA4lSSilLNJAopZSyRAOJUkopSzSQ\nKKWUskQDiVJKKUs0kCillLJEA4lSSilLNJAopZSyRAOJUkopSzSQKKWUskQDiVJKKUs0kCillLJE\nA4lSSilLNJAopZSyRAOJUkopSzSQKKWUskQDiVJKKUs0kCillLJEA4mKOt3d/d9XSoWXBhIVVebN\ng2nTTgSP7m7v/XnzIpkqpeKbBhIVNbq7ob4e1qw5EUymTfPer6+PvpKJlqxUrEiMdAKUCpbHA6tX\nnwgeCQnex6dO9T7uiaJs0bx53uDnT7c/KObkQGVlpFOn1OBE0U9PqRPBJFC0BZFYK1kpFUU/P6VO\nXHQDBbaZRAN/MJw69UTJas2a6CxZKQUaSFQUCcy5T50KXV0nLsbRGkwCaRBR0Uq/tipqeDzeNoTA\nnLs/Z5+TE10X4VgoWSnlp43tKqpUVnovtv6g4Q8m0RhEAquz/PenTYu+96OUfl1V1Ol5kY22i24s\nlayUAi2RxLTAnHtv9+OBW89BLJSslPKL6NdWRJ4SkUMisr6P50VEHhaRbSKyTkTODHcao1WsjQAP\nZfCe289BtJeslPKL9Ff3aeDSfp6/DBjnuy0A/jcMaYp6sTZOIZSAEGvnQCk3i2ggMcYsA472s8nV\nwLPGazmQKyLF4Uld9IqlcQqhBoRYOgdKuZ3b20hKgL0B96t8j+0P3EhEFuAtsVBWVha2xLmZ/0Lq\nn0YEwnwBzc31/q2rs7QbK9OiRPwcKBUnYuInZYx5whgz3RgzvaioKNLJcYVYGqcQ6uC9WDoHSrmZ\n2wNJNTAi4H6p7zHVj4iOAM/N9d7q6703/30LQgkI4TwHOouvinduDySLgNt8vbdmA/XGmP0DvSje\nWR2n4KYLY6gBIdhzYPW9ur1nmFLhENE2EhFZCMwDCkWkCngQSAIwxjwGLAYuB7YBzcAXIpPS6OEf\nm+Afp+AX7DgFy9Ob+9tEbGwj6S0g+NPU3/sZaKyG1ffasyNAYFvO1KnuGbOilNMiGkiMMTcP8LwB\n7gxTcqJezwsjnHxhDKYk4sYLo5XBe32N1bDjvcbS+iiD5daBnioy9KOPEXaMm7C1y2xdneXSSM+0\n9Xc/lP3Z8V7jcRZfrc5TPcXw1z2+6IVx8Ox4r/HWM0wHeqrexODlIX7phXFwrL7XWFofJVg60FP1\nRj/2GKIXxuDZ8V7jdRbfeCq1quDoRx8j9MI4OHa918rKky+i/v0E1cMtSsVTqVUFx+1TpKggWekm\nGyiUHlLNHR3sb2xgX2Mjh5qPUd/aSn1bK/WtrdS1tVLf2kZ9ayvNnR10dHXR3tVFR7fvr+8+gEc8\nJHgEjwiJHg8JIiR4PKQmJJKenEx6YiJpSUlkJCWTlpREelISuamp5KWmkZOaSl5qqu9vmveWloZH\nxNb32ptIzOIbqV5TuiiX6o0Gkhji5IWxtqWFrTVH2FJzhJ11tezzBY59jQ3Utraesg8BslNSyU1N\nJTslhZyUVIZmZpKU4CElIZEkj4fkhASSEhJI8nj7zXabbrqM8d66u4//be3spLmjneaODlo6Oqhp\naaG5vZ1jHe3Ut7XR2UdWOEGEwvQMijIyKErPYIjv79DMTIZnZTE8K5vhmVlkpaT0+d7dyPJYHwvs\nyrCo2KKBJMbYkTtuam9nRfVe1hzYz9oDB9h69AiHjh07/nxmUjLDs7MZnpXFlGHFlPgvyllZDEnP\nJDc1layUlH5LA3YxxtDU3k59Wyu1s2ZRl55G3cKFHG1p5vCxZg43H+PQsWMcbGpk/aGD1LQ0023M\nSfvISk45HljKc3MZl1/A2PwCxuUXkJOa6vh7GAw3jPXRRblUTxpIFAC76mp5e9dOlu7czvvVVXR0\nd5MgwoSCQs4tK2d8QQHj8wuZUFjI0IxMxKkgMcgR8SJCVkoKWSkplO4/4H1wfEWf23d2d3P42DH2\nNzWeVKra39RIVUMD71XtobWz8/j2RekZvqCSz/iCQiYWFjG+oJCM5OSQ36IVbhkEqYtyqUBieuTO\not306dPNqlWrIp0M1+s2hverq1iycztv79rBjtpaAMbm5XP+qNHMGzmKqcOKSUtKCm/CQplaxf+a\n+nrv35ycwe/Dp9sYqhsa2FpTw466Gj4+WsO2mqN8fLSGYx3tgLfariwnl4rCIiYWFlFRWMhpQ4Yy\nPDPreIB1ug2ju/vk6fG7uvRirqwRkdXGmOmhvFZLJHFmT30dL2/awMubNrCvsZFkTwKzS0dw6+Sp\nnF8+mrKcEGfqtTq3Vs9gYNNcXYPlEeHWq3Oor89h9erRx9sgzpxmGF7cwIOPHGZzzWE2HT7M5poj\n/HX7x/izYvmpaZw2ZAhr/zaUzuqhvP70UMpysjFGbG3D6KvXlFYvqUjRQBIH2jo7WfzxVn6/cT3L\nq/ciwLll5dx39lzOLx8dsWoa29g4UWRfbRBr1whTyWH+qBwuGjP2+PbH2tvZUnOEDYcPsf7QQdYf\nOkjDuFUwoZvzn4XclFSatg/j8LBiSjzDaWgdTnZq6Ofbaq8pnSNLOUGrtmJYR1cXv1u/lsdWreTg\nsSZG5uRyw6TTuLZiEsOzsu05iI3VSiftL5TX21SKCbxY+w2mDaKlvZOZVxxhd/NBUsoOkDLyAMnF\nR0C8PckmDx3G7NIRzCktY8bwElISB5efC7XXViR7eyn3s1K1pYEkRq2o2suDlUvYerSGWSWlfHXG\nLM4ZMdL+RnI3BRIbWW2D6Pn6upY21h3az4qqKpZX7WHdoYN0dneTkpDIrJJSzikbybkjyxmfXxDU\nZzTYkkV/JZlgg6SWZmKbBpIA8R5IDh1r4kd/X8aft2yiJCubB887n/mjxjjXy8rPJQHADlZLJMG8\n/lh7O+/vq+LdPbv5++5dbKs9CsCQjAzOLSvn3LKRzB1ZTm5qmivel5ZmYp8GkgDxFEgCc4Sd3d08\nu3YNP1vxD9o7u1gwbQZfmT4z6F5XlnObMRJIrObcQ339vsYG/r5nt/e2dzd1ra14RPjEsGLOLx/N\n+eWjqCgsspwhCKWkZUdpRrmfBpIA8RJIAnOIu+qP8rW/vMamI4dJPVjO69+8gFG5eSHtS3Ob1s+H\n1dd3dXfz0aGDvL1rB2/v3MH6w4cAKM7M5OIx47hqfAVThxUPOqhYKZFYLaUp99NAEsDNgcSuOubA\nH/XpFx4g6YaXqa+HA7+7iHEyjg9WS9D7dU1uM1Ilmj6Oa/WzsrM94WBTE+/s3smSndt5Z/cu2ru6\nKM/N47qKSVxbMYmS7IE7TtjVRqJjV2KXBpIAbg0kduf6u7thyhV7aTz/j3Q1pXPg0Rs4fURuSBf+\nsOc2e7t4DyaQ2Bl03FYlN0B6Gtva+Mu2rfxx80ZWVFcBMLtkBNdOnMRlY8eT2U9XbivfQS2RxD4N\nJAHcGEicyPW/vWsHX339VRqrcjjw6A10NWRayiGGNbcZeLEMpdeXHRd/u3ub2WUQ762qoZ4/bt7I\nK5s2sru+jtTERC4fO55PnX4G04tLeq36CqWkFKlSq/YSCy8d2e5yds+PtPjjLdzz5mLMoSL2P3Id\n3cfSgdBHN4dtpHRvo9fr609cxEN5PUT+4m+HEN5baXYOX5s5h7tmzObDA/t5edMGXt2ymVc2b2Ts\nocN86vobuXHSaWSnnJh4MpQ5siIx46+220UXLZGEkR25/pX7qvjsK7+ne18x2x+6likVKZZyiGHN\nbfZXCvDnnvv7PjpRinBLMLLpvTV3dPD6xRfy4rRP8EHZCDKTkvnU6Wfw+alnUmJxEOpAJQQn2gC1\nl1j4aNVWALcGEjvqmPc3NnL1i8+TmZxC53O30Hgk1ZYcW9hzf71dvIMJJP293s60RJIdI/t9wWjD\nhAk8efZsXps6GYBrKibx1RmzBtWjL1hOtAFqm0x4aSAJ4MZAYkcOq62zk0+9/CLbj9bwyk2fYVxB\nQfA5wCAuTmGtj3ZDG4lLnHLec3LxCLYEEv+5rN67h19/uJqFH62jo7uLqydM5M4Zsxidl28t8f40\nO1SC0F5i4aVtJC5nRx3z95e9zbqDB3jsiqsYV1BwfL89j2MljXbta0BWA0AMBBDoIxc/us6biw9l\nh31MXlkCPDD3fL4ybSZPfriK59et4U+bN/LJ8RXcNWP28e9TqJxYI0VnOI4uWiIJo1Bz/cur9nLL\nKy+x4Mzp3HfOecEf0K09k3oTQ6WMYDjaDjDAuaxpbubXH67muXUf0tzRwdUTJnLfOXMZkpHZZ1qD\n+d7aVYLQNpLIsFIi0Y8jjELJ9ZvcXB766X8zLCOTr88+25mEqbDz5+KnTj2Ri7ftQllX129ALkhP\n51tnn8uyz3+JL0+byeKPt3Lhc7/huXVr6OruPmnbefO8F3H/w/6L/Lx5J++zrxJEj90Fpa8S/NSp\nui68W+lH4nIrykeysnwkd0yfOejpxo9fUHJyvLcBLjAR5ea0OcR/gQy0ekcunvzcsBw/Ly2Nb519\nLn/57OeYPHQYD1Yu4YbfL2Sjb0qWnmuzBJYU6utPDS7+QNjVdSJAhhpMKitPDqj+c6Vdf91pwEAi\nIuNFZImIrPfdnywi/9f5pMW53FzIzeWRc85iSH09n5p/4YkqCxU5vs/FDr3l4r/Y9AjdYa5tHpWb\nx3PX3MBPL76cqoYGrn7heX7wbiUtne1BlZqcKkGEtd1OWRLMR/Mr4DtAB4AxZh3waScTpbzeHzmC\n98aPZcGSSlI6u0LfURzm9t3ulFx8di6f8zzHM9238o2G79KdY1/ACoaIcE3FRN669QvcdNoZ/PrD\n1Vz8/NO8s2fHqaWmXqretAQR34KpK0k3xrzfY7qFTofSE3NC7lZbV8dv33id3DUfcPOGjfEZCPpq\nNI5Ew7zNo+pPycXnw1OZXyO3oYZc6rxdgCMgJzWVH1xwEddNnMT9S9/i9kV/JGXtLJCzwHi/uH31\nntISRPwKJpAcEZExgAEQkRuA/Y6mKkZYGaTV0tHBkp3buWrjZtI6NG67loWAUlkZkLGoq8MD/NTK\nOBIbTSsu4Y83foapX19K25QVjLv3ICu+ewUXnJ0a9PrwKn4E8zW4E3gcqBCRauAe4A5HUxUDgm2o\n7Mvbu3bS3NHBFT/4YcQvKmHnb4eor/fe/Pf7ejwcQum4EET6TsnFR6gk0pu05ESKN1xM2j8uQsr2\ncO1Lz/PbNw9r7yl1in5LJCLiAaYbYy4UkQzAY4xpDE/SopvVQVqvf7yFwvR0ZpeMcD6xavCcmkDS\nZZkGb6lpMmsOFvLVxYu48Q+/40cLL+GqigrL+9bZfWNHvx+bMaYb+Jbv/2N2BxERuVREtojINhG5\nr5fnPy8ih0Vkje/2L3Ye32m9du8McjqUt3ft4NIx40jweE4pvYTSnTIk4czxB+or9++G7syDKYlE\nouTkAI8HziwezqJPf5ZJRUO456+v8/MV/8TKYOZgx6eo6BBM/H9LRO4VkREiku+/WT2wiCQAvwQu\nAyYBN4vIpF42fdEYM9V3e9LqccMp1EFam48cprWzkzkjyvQH51ZuCGp2GyDgDcnI5LfX3cT1E0/j\n5yve44HKJXSHEEysVvsq9wmmsf1Tvr93BjxmgNEWjz0T2GaM2QEgIi8AVwMbLe7XFfqb5mGghsq1\nBw8AcEbRsJN+cD2ninCsKsAt6370dTy3X7D7mPMqFiQnJPCTCy+hIC2NJz5YhUeE7553waDWj3di\nbi4VWQMGEmPMKIeOXQLsDbhfBczqZbvrRWQusBX4ujFmb88NRGQBsACgrKzMgaQOnpWJGj86dJCC\ntHRKsrNC+8G5bP3zmBYL73WQGQcR4dtnz8UAv/pgFUmeBO4/97yQgkng3FwaRKLXgIFERJKArwBz\nfQ9VAo8bYzocTJffq8BCY0ybiHwZeAa4oOdGxpgngCfAO2ljGNIVlJO6d3LixzPQj2XdwQNMHjoM\nEUEkAj+4GM5Rh1UMnzcR4b6z59LR1cVTa1aTmpjIvWedE/TrdXbf2BLMR/a/wDTgUd9tmu8xq6qB\nwC5Jpb7HjjPG1Bhj2nx3n/QdO6oMdpCWMYbddXXHp/YeVDtLpBp5Y6xxOe6E2N4jIvz73PO5+fTJ\nPLpqBQvXr+t744DvhBNzc6nICqaNZIYxZkrA/aUistaGY68ExonIKLwB5NPALYEbiEixMcY/+PEq\nYJMNx3W1hrY22ru7KErPsNTOYosYzlEre4gI35s3n/1NjTzw9luUZGUzd2R5v6+JxBrwylnBBJIu\nERljjNkOICKjAQsTP3kZYzpF5C7gTSABeMoYs0FEvg+sMsYsAu4WkavwTslyFPi81eO63ZHmYwAU\npqcP/gcXqSoprQqLDSF+bokeDw9f+kk+9YcXuGvxq7x046epKCzyPtlH+0tlXV1I1b7KnYIJJN8E\n3haRHYAAI4Ev2HFwY8xiYHGPxx4I+P87eCeMjBtHmpsBbyCB0NtZlAqnzORknrzyWq576XfcvuiP\n/PFTt/S5UJafzs0VOwb86IwxS4BxwN3A14AJxpi3nU5YvDra2gJAflr68ccG/YOL1JgGt46l0Dab\nsCjOyuLJK6+hvq2Ve95Y7B2wGIvjbdQpglmP5E4gzRizzjeFfLqIfNX5pMUn//guF025pFTQThsy\nlH8/dx7Lq/fy+43rI50cFSbBFCa/ZIw5noUwxtQCX3IuSfEtwTdrXygjhlUP2pssIm487QxmDi/l\nR39fxmFfm1+4SiIRm04ozgUTSBIkYKSRb2qTZOeSFN8SfKe6SwOJilIeEX5wwYW0dHTwn8sqw3Zc\nnU4ocoIJJG8AL4rIfBGZDyz0PaYc4BHvR9Id61mpcJQOtH4+YsbkF/CVGTN5detmlu3e5fjxdP6u\nyAomkHwbWIp3dPtXgCX4ZgRW9stM9hb2GtrbBthSKXe7Y9pMRubk8sN3K+ly+EoeuE58f+vLK2cE\n02ur2xjzmDHmBrzzWb1njLE8jkT1bqivy+Sh226LcEocEol2Cy2JRERKYiLfPOtcth6t4eVNGxw/\nXqjLNijrgum1VSki2b6p41cDvxKRh5xPmnuEswFvSEYGAAezspw7iFJhctnYcUwdWsxDy/9JS4ez\n0/OFumyDsi6YWJ1jjGkArgOeNcbMAuY7myz3CGsDXm4uaUVFZDc3czg5yT29jOxMh7ZbxBUR4b5z\n5nLwWBNPrfnAsePo/F2RFUwgSRSRYuAm4DWH0+Mqg23As6vkMqyunqp8y2uHKeUKM0tKuXDUGB5f\n/T6Nbc60/fU1nZCuLx8ewZze7+OdD2ubMWalb66tj51NljsMpgHPlpKLL3c+vuYoW0uGRz637mR7\nRqTfmwqrO2fOpqm9nRc3fBT0awabMausPPl36f/9VlYOKqkqBME0tv/eGDPZGPNV3/0dxpjrnU+a\nOwTTgGd318OKAwfZm5/nWO5NqQHZXK06Zegw5pSO4KkPV9PeNXBfnVAzZjp/V2ToaR5AMA14dnc9\nrHj4EQC21ByxmHqLtD1D2ejL02Zy4FgTi7b0vxqEjgmJPhpI+jGYBjw7ux5WFBYCsPHwIQupVyoE\nDlZnnls2krF5+f0vgIWOCYlG+pH0YzANeHZ2PSzOzGJoRiar9++z9gbsoiURZQMR4ZqKSXx4YD/7\nGxv73VbHhESXfj8WEanwTY2S2ePxS51NlnsE04Bnd9dDEWFWaSnLq/Z6p+JWKlwcrs68ZMxYAP62\nY1u/2+mYkOjSZyARkbuBP+Ndg2S9iFwd8PQPnU6YmwzUgOdE18PZJSM43HyMHbVHQ0/4QNwyTkXF\njTH5BYzNy+fN7X13/NQxIdGnvxUSvwRMM8Y0iUg58AcRKTfG/BxdLuMUdq9kOLt0BADLq6sYk18Q\n3It0qVtlFwe/QxePGcfjq9+ntqWFvLS0U57XNd2jT38ficcY0wRgjNkFzAMuE5GfooGkV3Z2PRyZ\nk0txZhbLdu+0lqje6DodKoIuGj2GLmN4d8+uPrfRMSHRpb9L3UERmeq/4wsqnwQKgTOcTli8ExEu\nGj2GZbt30zzQHEUaGFQUOX3IUDKTk1lRXdXvdjomJHr099HcBhwIfMAY02mMuQ2Y62iqFAAXjRlL\nW1en/es5uGF8iAa7uJXg8TBzeCnvVe2NdFKUTfoMJMaYKmPMgT6e+4dzSVJ+M4eXkpOSyl/7aZgE\n3BEYVPywIRMwu3QEu+pqOdDUfzdgFR20sOhiSQkJzB81mqW7dtDW2Wn/ASJZEtFquLjm70wyUPWW\nig4aSFzuyvEVNLS1sXTXjoE31pKIcpKNmYCKwiJSEhJZf+igzYlUkRB0IPEvbuW/OZkodcI5ZSMZ\nmpHJyxudX2EuLLQaTgGJHg8TCgvZePhwpJOibBDMColfFpEDwDq8KySuBlY5nTDlleDxcE3FRN7Z\nvZPDx45FOjkqntmcCZhUWMSmI4dcPXtDOFdHjWbBlEjuBU43xpQbY0b5bqOdTpg64fqJp9FlDH/a\nsjHSSbGPlkTi3qSiIdS1trLP4Qb3UINBWFdHjXLBBJLtQLPTCVF9G5tfwJnDivndR+vo1CyRijSb\nMgHjC7yzXG+rqbG8r76EGgx0KvvBCSaQfAf4p4g8LiIP+29OJ0ydbMG0GeyurxtwLQelokVZTg4A\nVY0NjuzfSjDQqewHp7+5tvweB5YCHwEahyPkotFjmVhYxC9WruCqCRNJ1G+yinJDMjJJ9iSwt6He\nkf0HztHlDwYQfDDwv97/OtAg0pdgTkmSMeYbxpjfGGOe8d8cT1kMstJwJyLcPWsOu+pqeXXLZnsT\nplQEeEQYnp1NVb0zgQSsrWuiU9kHL5hA8hcRWSAixdr9N3R2NNz5SyUPv/9eUOteK+V2JVlZVDtU\ntQWhBwOdyn5wggkkN+NrJ0G7/4bEroY7jwj3nnUOu+vrWLh+rTOJDWWQmY5OVyHKT0unrrXVkX1b\nCQZOrDEUywZsIzHGjApHQmKZ1braQPNGjuKsEWU8vOI9rq2YRHZKqjOJVioMclJSqG+zP5D41wby\nB4OVKwe/rondawzFsmAa2xGR04FJwPGrljHmWacSFYssN9z5cvxSV8d3zp7LVS88z6Or3ue+s22a\niNlfovDXVwezSFYor1HhEwWfR05qKg1tbXQbg0fsWeZo3jzvV9K/fklnJ8yY4Q0ePdc5GYhOZR+c\nYEa2Pwg84rudD/wEuMqOg4vIpSKyRUS2ich9vTyfIiIv+p5f4VupMSrZ2XB32pChXFsxiafXfMBe\nBxsqlXJaTkoq3cbQ1N5uy/56q0aeMePkamQNBvYL5pTeAMwHDhhjvgBMAXKsHlhEEoBfApfhLe3c\nLCKTemx2O1BrjBkLPAT8l9XjRoKlhrs+Jsr7tznnkCDCfyx7255EhjL9RSiv0fYU5zk8w7Kd04ak\nJSUB0No5wOJtQdLxH5ERzGltMcZ0A50ikg0cAkbYcOyZwDZjzA5jTDvwAnB1j22uBvxdjf8AzBex\nqfwbRk403BVnZXH3rDm8tXM7S3Zstz/RSvXC7mlD/D9mO6fbstLlV4UmmDaSVSKSC/wKb4+tJuA9\nG45dAgQukVYFzOprG2NMp4jUAwXAkcCNRGQBsACgrKzMhqTZL+SGO38Ov5f67i9MncYrmzbyvWVL\nOWtE2fHcnSWh1KcH8xptTwmffr4zVvSsNgrsQDJ1amjVRv58YbeNkaSvamQNJs4Z8LQaY75qjKkz\nxjwGXAR8zlfF5RrGmCeMMdONMdOLiooinZw+2d1wl5yQwPfmzaeqoYFfrFxubWcW6Sypsc+JaiP/\nSwz2BBId/xEZwTS23+7/3xizC9jga4C3qpqTq8hKfY/1uo2IJOJtm3FuhjeXOelLX1dH99FTc5az\nS0dw/cTTeHz1SlZEaA3soKo7dB2S8HPgHNtdbWT3BPI6/iMygjmt80VksW9k+2nAciDLhmOvBMaJ\nyCgRSQY+DSzqsc0i4HO+/28Alho3L17Qg5Vc+mDqoh887wJG5uRy9xuvc7g5vGuW6Cyp8cXuaUOO\ndXgb2TOTk4M+fn/34dQuvv5gUlkZWhrVwIKp2roFb4P3R8Bi4B5jzL1WD2yM6QTuAt4ENgEvGWM2\niMj3RcTfvfjXQIGIbAO+AZzSRditrDRKDvbinJmczC8uv5KGtjbueWMxXWG8eg+6ukNLIlHLiWqj\nxrY2ADKSBg4kg/lN6fiP8Aqmamsc8K/Ay8Bu4FYRSbfj4MaYxcaY8caYMcaYH/gee8AYs8j3f6sx\n5kZjzFhjzExjTBALl0ee1Vx6KHXREwuL+P7583mvag8Pv29HX4jgaS+Z+OBEtVFTezsZSUkkDPBi\nLfm6WzC9tl4F7jTGLPF1vf0G3mqp0xxNWRSzY0qUUEbC3zjpdN6vruIX7y/nzGHDOa88PLPbaC+Z\n+GH3tCGN7W1kJqcMuJ2d07kvet8AABjqSURBVAwp+wVz+mcaY5YAGK//B1zrbLKin9Vceqh10d+f\nN5+KwiLufuN1dtQePWl/PfdvB+0lE3/srDY6dOwYhenBVXBoyde9+vwIRORbAMaYBhG5scfTn3cy\nUbHASqOklYtzWlISj3/yahI9wpdf+zONbW2Orj2tvWSUFfsbGyjJyg5qW10fxL36+5l/OuD/7/R4\n7lIH0hIzrObSrV6cS7Nz+OXlV7GrrpZ73lxMXb1xtG5Ze8nEMQvTrxhjqG5sYHjWwJ1AteTrbv21\nkUgf//d2XwXoKxAEO301WK+Lnl06gn+fez7ffWcpX/z5O/Cv57FmjThWt6y9ZNRg1be1cqyjg+FB\nlEjs+E0p5/QXSEwf//d2X/VgR6Ok1YvzrZOnsqP2KE+tWc1djybxb2edffw5rVvuQadsGRwbprzZ\n7dt2RE5wc8Dq+iDu1V8gmSIiDXhLH2m+//Hd19WUghDpXLqI8MB5F9DS2ckvVi4n91Kh7o2zAO1V\npSJv05HDgLfrerAi/ZtSveszkBhjEvp6TkURI7z5zYtpnGTIu+w9vvdd4Td3zDlp4r2o/zFaKU3E\ny2SSdr+vUCeGDNh+05HDZCYlU5pteVUKFWHRfgmJek5PdujxQG6OULLpYq6ZMImfrfgntz++wr5e\nVbq+iArRxsOHqCgqsrwyok4YGnlBLbWrnBG4JKjHc6Jnin9JULt465Y9GC7BYPjp8r/z9ccMd82c\nRdj6TTiR07ejNOHQlOuu4XSJa7AlEV86uvLy2Px/vsl1M3quHDE44foNqf5piSRCwj3lg8cDCR4P\n/33RpVxbMYmHVvyDn/zzXUKeA9PhVfhUbNtQPIxjKSlMKx4e8j502hT30BJJhERqyodEXzBJS0ri\n8dUrOdLczA8uuIjkBIeaxJzMEdtZmohkScTJ0pBbSlw90vHec8/AP95lTmnoC9HptCnuoYHEAT1X\niutr5bhQ5tOyg0eE/5g3n6L0dH6+4j321tfz6BVXkp+WHnTaXXOBUpFj4bN/b+9exuUXUJSRYSkJ\nkfoNqZPp6bbZYKYjieSUDyLCv846i59fegVrDu7nuhd/x9lX1tg/lUo4FrSK1qnpw1k96JZzVFdH\ne00NK/dVMad0xMDbD0CnTXEHDSQ2GkydrVumfLhyfAULr7uJYx0d7J/3W7Z2fzy4+ma3XKBU+FgM\ngCuq9tLS2cnZI0ZaSoZbfkNKq7ZsNZg6WzdN+fCJiZNYlJ3FV//7x6y9fRG7/zqLhMSzwHjsq2+2\nMsYjVgNVnFYPLt62lYykJM4daS2QuOk3FO8kilauDcr06dPNqlWrIpqG7u6T62y7uvr+UgfdJhFi\nOoLat+9C1nbkCA9WLuWljR/RvLGcw89fRkdDeuR+kPFygY3W9xlCuju6upj968c4p6ycn196hS3J\ncPI3FE9EZLUxZnoor9XTbbPB1tk6NeVDUG01PaookgoKOXDJQY68cBFp4/dS8u1nmXzlrvBXEcRb\n1+I4qh5cXr2X2tZWLh833rZ96rQpkaen3EZuqbMNpX+9Ab7Y9AjPdN/KmJbJvP7Zz5DcnUrzJS8z\n6c4lNLa2hyfxKnqEEABf27qFjKQkzhtZ7kyaVERoG4mN3FJnG3RbTUAdvQC7pt7K1OOjhItY953P\ncObX/k77pA/45As7+cmFlzDLhp42A4rTtoNYd/jYMV7dupmrJ0wkNTEp0slRNtI2Ege4pc426Laa\ngAt2b2lftb+Kb7/1Jrvr67ht8lS+dfZc0pPCcCHQQBJTvvfOUp5ft4a/3voFRuXmRTo5qgdtI3EZ\nN9TZDqqtJqCKore0zywp5fVbbuPzUz7Bs+vWcNlvn+HtXTucSXgf6VLRrbqhgd99tJYbJ52uQSQG\naSCJQU601aQnJfHAeRfwwvWfIjkhgdsX/ZEvv/an44sT2Zn2/u6r6PSzFf9ERPjazDkhvV6/F+6m\ngSQGWV3zvT/+0sm3zjqXf+zdw8XP/4YfvltJQ1ur5XQPZlYAFT3er67i5U0b+PyUT1AcxPrsPen3\nwv00kMSoysqTG9b9wcSOqbWTExK4Y/pMlt72Ra6pmMSvP1zN+c/8mmfXfkhniFlFnck1NrV1dnL/\n0r9Rmp3N3bPOGvTr9XsRHbSxXVm24dBBfvDuOyyv3svovDzumXUWl4+bMOgFiwIvEn7HS1X52vAe\njR5a/g8eeX85T199PXND7PLb7/dCs8K2sdLYroHE5cLVA8zqcYwxvLVjO//vvb+z9WgNEwoK+frs\ns7ho9FhkEAGlz55mdvXgiqOeYJHuPbi15ghXLnyOK8ZN4KeXXG5pX4OZLUKFRnttxahw1Q3bcRwR\n4aIxY3n9ltv42SWX09bVxR2vL+KKhc/x2tbNdAVRB9FbT7MvJj1Hd04Uj3KPUHoj3a7Q1tnJvX/9\nC5nJydx/rrWD6gy/7qeBxKXCVTds93ESPB6umjCRv3728/zPRZfS0dXF3W+8zoXP/YaF69fR2tnR\nZzp662n2TPetfLHpESyXm+No2hU3tCv8x7uVrD98iP+68BIK0tND3o9bZotQ/dOqLRcLV92wk8fp\nNoa/bt/Go6tWsP7QQfJSU7n59Cl8dvIUhmWe3IOn5/rbnZ0wY4Zv/e01uXQb8NSHWCXVc6XGnBzv\nX6equMJ9vB4i2a7wp82b+MZfF7PgzOncd855lven67KHh7aRBIilQALhqxt2+jjGGFbuq+apNav5\n2/ZtJHg8XD5uPF+YciZThhWflA6P58TFY+VKSEyE7pxcvtj0CLvOvdXaxSNcbSQRDiQQmXaFyl07\nueO1PzNl2DCev/ZGkmxawjnS7T3xwEog0bm2XKyvumGnSiROHkdEmFlSysySUvbU1/Hs2jW8tOEj\nFm3ZzJnDirnptDO4bOx4slJSTqqamTHDN2/Y6Dpv9UZ9lFxEIjxfWLi+O4GW7NjOnX95lXEFBTz+\nyattCyLgjtkiVN+0ROJSPeuGAydhtLOKIlzH6U1jWxsvb9rAc+vWsLOultTERC4aPZbrKiYxp3Qk\ns2Z4or/LZwQCSbg/U2MMT6/9kP9c9janDxnK01dfT15amn0HUGGhVVsBYiWQQPjqhiNdB22MYe3B\nA7yyaQOvbt1CfVsrRekZXDW+gu/dfBod+4oA7fI5GOH6TDu7u/mPZW/z3Lo1XDxmLA9dfDlp4ZjQ\nU9ku6gKJiOQDLwLlwC7gJmNMbS/bdQEf+e7uMcZcNdC+YymQQPSMI7FLW2cnlbt38sqmjfxt2w7w\ndNO+v4Bja8YzomUCa5YWaDAJktOfaWNbG3e/8Trv7N7Jl86czrfPnjvoQajKPaIxkPwEOGqM+bGI\n3AfkGWO+3ct2TcaYzMHsO9YCSTzy557XfdzMhCu3Mvn6LbxfXQUCntpC7r50PJeNHc/Y/PxBDXZU\n9qlqqOdLr/6JbUdr+P75F3Lz6ZNtP4ZbMjfxIhoDyRZgnjFmv4gUA5XGmAm9bKeBJE71rJo50NjE\nBV/+GDN2C+2F1RhgZE4u88pHcW5ZObNLRzi/Rkosjoof5HtqbGvjsdXv89SHH5CU4OGXl1/JuWXl\nticr0tWt8SgaA0mdMSbX978Atf77PbbrBNYAncCPjTF/6mN/C4AFAGVlZdN2797tWNpV+PSVIz3Y\n1MRbO7fz1o7trKjeS2tnJ8meBKaXlDC3rJy5I8uZUFBof2klGgPJQGkO8j11dHWxcP06Hl7xHkdb\nW7hqQgX3zjmH0uyckPbXn0h2AIlnrgwkIvIWMKyXp+4HngkMHCJSa4w5ZbUbESkxxlSLyGhgKTDf\nGLO9v+NqiSS+tHV2snJfNct272TZnt1srTkCwJCMDGaVjGBO6QhmlY6gPCc39MDigjEhIevrwh7k\nezLG8Ob2bfzkn++yq66W2SUjuO+cuUwe2ttPu5/jBSEw49DdDWeeCWvXnnheg4izXDmOxBhzYV/P\nichBESkOqNo61Mc+qn1/d4hIJfAJoN9AouJLSmIi55SN5JyykfwfYH9jI+/u2cU/9u5hedVeXt26\nGYBhGZnM9gWVWSWljLQSWKJBz0AxyAt8V3c3y/bs4tGVK1i9fx/j8gt48sprOb98VO/nzeLxelZl\n9UaDiHtFakDiIuBzwI99f//ccwMRyQOajTFtIlIInA38JKypVFHDn5stzsriptPO4IaJZyBi2FF7\nlOXVVSyv2sO7e3bzpy2bAChIS+P0IcOYPHQoZwwZyhlDhjE0s4/muIDBhd0GPAEXRycbgPtsbLaj\niq2XAZPGGNYfOshrWzfz2tYt7G9qZEhGBj+84CJumHQ6iQ690Z5zg61efWppBJwfUKlCF6lA8mPg\nJRG5HdgN3AQgItOBO4wx/wJMBB4XkW68k0v+2BizMULpVS7Wd8OsUFlZwJj8Aj5zxhSMMXx8tIbV\n+/fx4YF9fHTwIO/u2UW3r3p3SEYGEwuHMKGwkIqCQiYUFDI6L5+URO/P5J6m/6TO5PBUt/MNwP02\nNgezgyBH1htgy5AhvP7e33lt6xZ219eR5PFwTlk59587jwtHjyE5mBHqFkby+xdd87eDBB5uyhT4\n4IMTz2kwcScdkKiimtWG2ZaODjYdOcxHhw6w7uBBNh05zPajNXT4ppVN9HgYlZvH+IJC3nopn73r\n8hidl8+7r+Uyb06KIw3A/b2nz3me4zfdtyEQXFtNjwt7R1cXG48cZmV1Nav3V7NqXzU1Lc14RJhT\nOoJPjq/gkjFjyU0NcWS6xTaS3oKI9toKD1c2tkeKBpL4Y/dMtx1dXeysq2VLzRG21hxhy5EjbKk5\nQlVD/UnT2Xc2pJPSnMe15+cxIieb4VnZDL/lFobXNTDs44+Pl2Tsek+f8zzHU5lfw9MQXKN/XWsL\nO2tr2VVXx/bao3x4YB9rDuynpbMTgBHZOcwYXsK04hJ+vGAMeSkZEbtI9/Z+AwOJfxstiThHA0kA\nDSTxKRwz3bZ1drKzto5pF9aSVFRL0pBaLriulp11tRxpbj5l+6L0DIqzsihISyc/LY38tDTyUtPI\nS00lNy2NzORk0hOTSE1MJMV3S01IJDUxkUSPh84uQ1a2AY9BxHDosMGIoXXSRBpSU2l46y0a2lpp\naGujoa2N+rZW9tbXs6uujl31tdS1th5Pi0eESYVFTCsu4fc/L2Hz0hLOGJ3piq612t3XHTSQBNBA\n4j5Oj1B2w7otHUMK2J+dzb7ERPbl5bKveBj7cnLYf+011La0UNPSwtGWFtq6Ou1LUA8CDMvMojw3\nj/LcXEb5/pbn5jEiO+d4CcmNa6DrAMTI00ASQAOJuzh9gXDNLMk7cvEI/Y7LMMbQ0tlJbWsLdS0t\nNLW309LZSWtnJ21dvr+dnbR0dPKzh7vZXy0MHy58/R7hoZ96qN4LJSXCd+9PIicthezkFLJTUshO\nSSUrJZms5BQSgnyzblwDXadEiSxXjiNRqrdunYEXXzsuFB6P95odGDT8x8nJse9CNOBx/Cs39tPY\nLCKkJyWRnpRESVZ2v8dbuAdS62H137zHuv0537H2w02nW3svkVirJBi65kj00hKJclQ4q51cMUuy\njdOoOPGetD1C9UVLJMq1/Dn3wGoUJy5W4crNDngcG6dNceI9hasEp+KLBhLlKLdWo8SzysqTSzf+\nYKKfhwqVfnWUY3pWo3R1ef/620x8Y/5UBGh7hLKTfn2UY/qqRpk6VatRlIolWrWlHKXVKErFPv05\nK8dpNUr06ln9qNWRqjf6k1ZK9WrevJPbsvxtXvPmRTJVyo00kCgVQHPgXj0HkwZ2nKivj9/zonqn\nbSRK+YR7vic3TwnS1xohOmhR9Ua/DkoR/hx4NFQb+YNJIA0iqjf6lVCKk7sm+3PgTk0bEi3VRn0N\nJnVL+pR7aCBRyidcOfBwBq1Q6WBSNRgu+Moq5Q7hzIG7vdpIB5OqwdCvg1KEPwceDdVGlZUnBzd/\nMNGFplRPGkiUIrw58GiqNtLBpCoY2v1XKZ9wTeeiU7mrWKOBRKkA4cqB6xxkKpbo11apCNFqIxUr\n9KurlFLKEg0kSimlLNFAopRSyhINJEoppSzRQKKUUsoSDSRKKaUs0UCilFLKEg0kSimlLNFAopRS\nyhINJEoppSzRQKKUUsqSiAQSEblRRDaISLeITO9nu0tFZIuIbBOR+8KZRqWUUsGJVIlkPXAdsKyv\nDUQkAfglcBkwCbhZRCaFJ3lKKaWCFZFp5I0xmwBEpL/NZgLbjDE7fNu+AFwNbHQ8gUoppYLm5vVI\nSoC9AfergFm9bSgiC4AFvrttIrLe4bRFi0LgSKQT4RJ6Lk7Qc3GCnosTJoT6QscCiYi8BQzr5an7\njTF/tvNYxpgngCd8x11ljOmz3SWe6Lk4Qc/FCXouTtBzcYKIrAr1tY4FEmPMhRZ3UQ2MCLhf6ntM\nKaWUi7i5++9KYJyIjBKRZODTwKIIp0kppVQPker+e62IVAFzgNdF5E3f48NFZDGAMaYTuAt4E9gE\nvGSM2RDE7p9wKNnRSM/FCXouTtBzcYKeixNCPhdijLEzIUoppeKMm6u2lFJKRQENJEoppSyJ+kCi\n062cICL5IvI3EfnY9zevj+26RGSN7xZTHRgG+pxFJEVEXvQ9v0JEysOfyvAI4lx8XkQOB3wX/iUS\n6XSaiDwlIof6Gl8mXg/7ztM6ETkz3GkMlyDOxTwRqQ/4TjwQzH6jPpCg060Eug9YYowZByzx3e9N\nizFmqu92VfiS56wgP+fbgVpjzFjgIeC/wpvK8BjEd/7FgO/Ck2FNZPg8DVzaz/OXAeN8twXA/4Yh\nTZHyNP2fC4B3A74T3w9mp1EfSIwxm4wxWwbY7Ph0K8aYdsA/3UqsuRp4xvf/M8A1EUxLJATzOQee\noz8A82WAuXqiVLx85wdkjFkGHO1nk6uBZ43XciBXRIrDk7rwCuJchCTqA0mQeptupSRCaXHSUGPM\nft//B4ChfWyXKiKrRGS5iMRSsAnmcz6+ja+LeT1QEJbUhVew3/nrfdU5fxCREb08Hw/i5foQrDki\nslZE/iIipwXzAjfPtXVcOKdbcbv+zkXgHWOMEZG++naPNMZUi8hoYKmIfGSM2W53WpXrvQosNMa0\niciX8ZbULohwmlRkfYD3+tAkIpcDf8Jb5devqAgkOt3KCf2dCxE5KCLFxpj9vqL5oT72Ue37u0NE\nKoFPALEQSIL5nP3bVIlIIpAD1IQneWE14LkwxgS+7yeBn4QhXW4UM9cHq4wxDQH/LxaRR0Wk0BjT\n78SW8VK1FS/TrSwCPuf7/3PAKaU1EckTkRTf/4XA2cTO1PzBfM6B5+gGYKmJzVG5A56LHu0AV+Gd\nQSIeLQJu8/Xemg3UB1QRxxURGeZvMxSRmXhjxMAZLWNMVN+Aa/HWabYBB4E3fY8PBxYHbHc5sBVv\nzvv+SKfboXNRgLe31sfAW0C+7/HpwJO+/88CPgLW+v7eHul023wOTvmcge8DV/n+TwV+D2wD3gdG\nRzrNETwXPwI2+L4LbwMVkU6zQ+dhIbAf6PBdK24H7gDu8D0veHu4bff9JqZHOs0RPBd3BXwnlgNn\nBbNfnSJFKaWUJfFStaWUUsohGkiUUkpZooFEKaWUJRpIlFJKWaKBRCmllCUaSFTc6DHr8ZpwzgI9\n0KyrSkUz7f6r4oaINBljMiN07LlAE97JAU8P0zETjDFd4TiWim9aIlFxTURyfGt2TPDdXygiX/L9\n/7++yS03iMj3Al6zS0R+5CvVrBKRM0XkTRHZLiJ39HYcE8Ssq+JdW2e9b8K8Zb7HEkTkf3yPrxOR\nr/keny8iH4rIR77Sjn+2gl0i8l8i8gFwo4iMEZE3RGS1iLwrIhV2nDelAkXFXFtK2SRNRNYE3P+R\nMeZFEbkLeFpEfg7kGWN+5Xv+fmPMUd/aHktEZLIxZp3vuT3GmKki8hDeNR7Oxjtqfj3wWIjpewC4\nxHgn1Mz1PbYAKAemGmM6xbt4WarvmPONMVtF5FngK8DPfK+pMcacCSAiS/COWv5YRGYBj6ITMyqb\naSBR8aTFGDO154PGmL+JyI14p8mYEvDUTSKyAO/vpBjvAlH+QOKft+ojINMY0wg0ikibiOQaY+pC\nSN8/8Aa0l4BXfI9dCDxmvFPe4wtsU4Cdxpitvm2eAe7kRCB5EUBEMvFOifP7gCVXUkJIl1L90kCi\n4p6IeICJQDOQh3dm4FHAvcAMY0ytiDyNt8Th1+b72x3wv/9+SL8rY8wdvlLDFcBqEZkWyn6AY76/\nHqCut+CplJ20jUQp+DremW9vAX4jIklANt4Lcr2IDMW7HKujRGSMMWaFMeYB4DDeqc3/BnzZN+U9\nIpIPbAHKRWSs76W3Au/03J/xTgm+01fa8q9NPqXndkpZpYFExZO0Ht1/f+xrZP8X4N+MMe8Cy4D/\na4xZC3wIbAZ+h7faKWQishB4D5ggIlUicnsvm/23r/F8PfBPvDOwPgnsAdaJyFrgFmNMK/AFvFVW\nH+EtBfXVLvMZ4HbfazcQp8vtKmdp91+llFKWaIlEKaWUJRpIlFJKWaKBRCmllCUaSJRSSlmigUQp\npZQlGkiUUkpZooFEKaWUJf8f+zxGXfNwZd8AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-5bfc26cb2b1f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    159\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 161\u001b[0;31m \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifierPrediction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtheta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    162\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Train Accuracy:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnewaxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"%\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-4-5bfc26cb2b1f>\u001b[0m in \u001b[0;36mclassifierPrediction\u001b[0;34m(theta, X)\u001b[0m\n\u001b[1;32m    157\u001b[0m   \u001b[0mprediction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtheta\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 159\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifierPrediction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtheta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'predictions' is not defined"
          ]
        }
      ]
    }
  ]
}